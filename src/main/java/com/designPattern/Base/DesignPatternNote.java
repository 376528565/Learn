package com.designPattern.Base;

/**
 * @Author: LQL
 * @Date: 2024/07/19
 * @Description:
 */
public class DesignPatternNote {

    /**
     * 设计模式的7个设计原则
     * 1、单一职责：一个类、接口、方法只负责单一功能
     * 2、接口隔离：接口支持多继承，因此可以将接口的功能细分，使得接口只用来规范特定的功能
     * 3、开闭原则：修改关闭，扩展开发（抽象类和接口定义具体规范，由实体类进行扩展，而不应该支持对实体类的修改
     * 4、里氏替换：表述父类跟子类之间的关系，子类是父类功能的扩展（和子类自有的功能），在代码中子类可以替换父类实现相似的功能
     *
     * 5、依赖倒置：高层模块和低层模块都应该依赖于抽象（抽象类或接口），而不是直接依赖于具体实现,
     * 高层模块：业务逻辑层、控制层或服务层，它们包含应用的核心功能和逻辑，负责协调和管理系统的各种操作
     * 例如，在一个电商系统中，处理订单的业务逻辑类、用户管理服务类等可以被视为高层模块
     * 低层模块：数据访问层、实用工具类或具体实现类
     * 它们负责与系统的外部资源（如数据库、文件系统、网络等）进行交互，或者提供具体的功能实现
     * 例如，在一个电商系统中，数据库访问类、邮件发送类等可以被视为低层模块
     *
     * 6、迪米特法则：限制类只跟其类内部的参数、方法、属性等进行数据交互
     * 7、组合聚合复用：组合/聚合复用原则建议在类设计中尽量使用组合或聚合而非继承，以提高系统的灵活性和可维护性。
     * 组合表示强关系，子类的生命周期依赖于主类；
     * 聚合表示弱关系，子类的生命周期与主类无关。通过理解和应用这两种关系，可以更好地构建健壮和可扩展的软件系统
     */


}
